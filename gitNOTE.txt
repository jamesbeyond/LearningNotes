####################################### 
### Introduction  and Installations ###
####################################### 

http://git-scm.com

SCCS
RCS
CVS
SVN

git --version

##########################
### Git configurations ###
##########################

[System]
/etc/gitconfig
C:\Program Files\Git\gitconfig

git config --system

[User]
~/.gitconfig
%HOME%\.gitconfig

git config --global user.email "Qinghao.Shi@arm.com"
git config --global user.name "Qinghao Shi"
git config --global core.editor "vim"

[Project]
<project>/.git/config

git config

##################
### Git Basics ###
##################
git help

git init
<project>/.git

git add .

git status

git commit -m "<msg>"

git log

######################################
### Git Consepts and changes files ###
######################################

HEAD
.git/refs/heads/master

git add <file>
git add -all # moving everything to staging

git diff
git diff <file> # compare working directory with staging or repository
git diff --staged # compare staging with repository

git commit -am "message"  # stage and checkin in one go

git rm <file>

git mv <file1> <file2>

#####################################
### Undo Changes and Ignore Files ###
#####################################

git checkout -- <file> #discard changes in working directory (will keep staged files changes)

git reset HEAD <file>  #Unstage a file

git commit --amend -m "<msg>" # amend the last commit plus current staged contents

git checkout <sha> -- <file> # revert file to the state of the commit pointted by the SHA

git revert <sha> # revert a commit with new commit
git revert -n <sha> # revert a commit without new commit

git reset --soft <sha> # leave the files in staged 
git reset --mixed <sha> # leave the files in working dir
git reset --hard <sha> # reset back to a commit, and revert all the chnages back to this point

git clean -n  # test for throw untracked files
git clean -f  # throw untracked files


<project>/.gitignore

~/.gitignore_global
git config --global core.excludefile ~/.gitignore_global

git rm --cached <file> #ignore the file in cache (file already been tracked)

.gitkeep

####################################
### Navigating Trees and logging ###
####################################

git checkout <sha>

[tree-ish] SHA-1, HEAD pointer, branch ref, teg ref, ancestry
HEAD^,<sha>^,master^,HEAD~1,HEAD~
master^^, HEAD^^, <sha>~2

git ls-tree HEAD
git ls-tree master^^ <path>
git ls-tree <sha>~2 <path>

git log --oneline
git log -5
git log --since/after="<YYYY-MM-DD>"
git log --until/before="<YYYY-MM-DD>"
git log --author="<name>"
git log --grep="<msg>"
git log <sha>..<sha>
git log <sha>.. <file>
git log -p
git log --stat --summary
git log --graph
git log --oneline --graph --all --decorate

git show <sha>

git diff --cached
git diff <sha>
git diff <sha>..<sha> <file>
git diff -bw <sha>..HEAD


#################
### Branching ###
#################

###############
### Merging ###
###############



######################################
### Working with remote repository ###
######################################
git remote
git remote add origin <url>
git remote rm origin
git branch -r  # show remote branches
git branch -a  # show all branches (local and remote)
<project>/.git/config

git push
git push -u origin master # -u make the branch tracking 
????git branch --set-upstream non-tracking branch

.git/refs/remotes/origin
git clone <url>
git clone <url> <project>


git fetch origin

git pull # git pull = git fetch + git merge

git push origin :<branch>  # remove remote branch (local will be kept)
git push origin --delete <branch> # remove remote branch same as above


####################
### Git workflow ###
####################
[from user 1]
git checkout master
git fetch
git merge origin/master
git checkout -b <newbranch>
git add <file>
git commit -m "<msg>"
git fetch
git push -u origin <newbranch>

[from user 2]
git checkout master
git fetch
git merge origin/master
git checkout -b <branch> origin/<branch>
git log
git show <sha>
git commit -am "<msg>"
git fetch
git push

[from user 1]
git fetch
git log -p <branch>..origin/<branch>
git merge origin/<branch>
git checkout master
git fetch
git merge origin/master
git merge <branch>
git push



