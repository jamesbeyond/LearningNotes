####################################### 
### Introduction  and Installations ###
####################################### 

http://git-scm.com

SCCS
RCS
CVS
SVN

git --version

##########################
### Git configurations ###
##########################

[System]
/etc/gitconfig
C:\Program Files\Git\gitconfig

git config --system

[User]
~/.gitconfig
%HOME%\.gitconfig

git config --global user.email "Qinghao.Shi@arm.com"
git config --global user.name "Qinghao Shi"
git config --global core.editor "vim"

[Project]
<project>/.git/config

git config

##################
### Git Basics ###
##################
git help

git init
<project>/.git

git add .

git status

git commit -m "<msg>"

git log

######################################
### Git Consepts and changes files ###
######################################

HEAD
.git/refs/heads/master

git add <file>
git add -all # moving everything to staging

git diff
git diff <file> # compare working directory with staging or repository
git diff --staged # compare staging with repository

git commit -am "message"  # stage and checkin in one go

git rm <file>

git mv <file1> <file2>

#####################################
### Undo Changes and Ignore Files ###
#####################################

git checkout -- <file> #discard changes in working directory (will keep staged files changes)

git reset HEAD <file>  #Unstage a file

git commit --amend -m "<msg>" # amend the last commit plus current staged contents

git checkout <sha> -- <file> # revert file to the state of the commit pointted by the SHA
git checkout <sha>

git revert <sha> # revert a commit with new commit
git revert -n <sha> # revert a commit without new commit

git reset --soft <sha> # leave the files in staged 
git reset --mixed <sha> # leave the files in working dir
git reset --hard <sha> # reset back to a commit, and revert all the chnages back to this point

git clean -n  # test for throw untracked files
git clean -f  # throw untracked files


<project>/.gitignore

~/.gitignore_global
git config --global core.excludefile ~/.gitignore_global

git rm --cached <file> #ignore the file in cache (file already been tracked)

.gitkeep

###################################
### Trees, show, logs and diffs ###
###################################

[tree-ish] SHA-1, HEAD pointer, branch ref, teg ref, ancestry
HEAD^,<sha>^,master^,HEAD~1,HEAD~
master^^, HEAD^^, <sha>~2

git ls-tree HEAD
git ls-tree master^^ <path>
git ls-tree <sha>~2 <path>

git log --oneline
git log -5
git log --since/after="<YYYY-MM-DD>"
git log --until/before="<YYYY-MM-DD>"
git log --author="<name>"
git log --grep="<msg>"
git log <sha>..<sha>
git log <sha>.. <file>
git log -p
git log --stat --summary
git log --graph
git log --oneline --graph --all --decorate
git log <branch>

git show <sha>
git show --format=oneline <sha>
git show <tree-ish>

git diff # compare working directory with staging or repository
git diff --cached
git diff <sha> # compare working directory with the <sha> commit
git diff <sha> <file> # compare working directory with the <sha> commit on a file
git diff <sha>..<sha> <file> # compare between two <sha> commit on a file
git diff --stat --summary <sha>..HEAD
git diff -bw <sha>..HEAD

#################
### Branching ###
#################

git branch # list all the branch

git branch <branch> # create a new branch
git checkout -b <branch> # create and switch to a new branch

git checkout <branch> # switch to new branch (current working branch need to be clean)

git diff master..<branch>
git diff --color-wrods <branch1>..<branch2>^^

git branch --merged # check the current branch contains which other branch commits 
git branch --no-merge # check that if any branch not merge in current branch 

git branch --move <branch> <newbranch> # rename a branch

git branch -d <branch> # delete a branch
git branch -D <branch> # delete a commited branch

###############
### Merging ###
###############

git merge <sending_branch> # merge branch from receving branch
git merge --no--ff <sending_branch>
git merge --ff-only <sending_branch>

git merge --abort

git add # after resolve conflict
git commit # after resolve conflict

git mergetool
git mergetool --tool=<tool>

#############
### Stash ###
#############

git stash save "<msg>"

git stash list

git stash show <stash>
git stash show -p <stash> # show the details of the stash

git stash apply
git stash apply <stash>

git stash pop
git stash pop <stash>

git stash drop <stash>
git stash clear # clean all stashes

######################################
### Working with remote repository ###
######################################

git remote # show all the known remote
git remote -v # show details for the remote 

git remote add origin <url> # adding url for the git remote as origin
<project>/.git/config

git remote rm origin # remove 

git push  # once tracking is setup
git push -u origin <branch> # push branch onto origin, -u make the branch tracking 
<project>.git/refs/remotes/origin/<branch> # the origin branch refs

git config branch.<branch>.remote origin # set a branch tracking with remote by change the config file
git config branch.<branch>.merge refs/heads/<branch>

git branch --set-upstream <branch> origin/<branch> # # set a branch tracking with remote by branch command (--set-upstream = -u)

git branch -r  # show remote branches
git branch -a  # show all branches (local and remote)

git clone <url>
git clone <url> <project>

git diff origin/<branch>..<branch> # diff between branch and origin/branch

git fetch
git fetch origin

git pull # git pull = git fetch + git merge

git branch <branch> origin/<branch> # create a local branch from remote
git checkout -b <branch> origin/<branch> # create a local branch from remote and switch to that branch

git push origin :<branch>  # remove remote branch (local will be kept)
git push origin <localbranch>:<remotebranch>
git push origin --delete <branch> # remove remote branch same as above


####################
### Git workflow ###
####################
[from user 1]
git checkout master
git fetch
git merge origin/master
git checkout -b <newbranch>
git add <file>
git commit -m "<msg>"
git fetch
git push -u origin <newbranch>

[from user 2]
git checkout master
git fetch
git merge origin/master
git checkout -b <branch> origin/<branch>
git log
git show <sha>
git commit -am "<msg>"
git fetch
git push

[from user 1]
git fetch
git log -p <branch>..origin/<branch>
git merge origin/<branch>
git checkout master
git fetch
git merge origin/master
git merge <branch>
git push

#############
### Tools ###
#############

[aliases]
git config --global alias.st "status"
git config --global alias.co "checkout"
git config --global alias.ci "commit"
git config --global alias.br "branch"
git config --global alias.df "diff"
git config --global alias.df "diff --staged"
git config --global alias.logg "log --oneline --graph --all --decorate"

[SSH keys for remote login]
https://help.github.com/articles/set-up-git#password-caching




