/*
Q: What is preprocessor
Q: Dose main function have to be "int main()", can it be "void main()"
Q: Difference between <stdio.h> <cstdio> <iostream>
Q: What namespace for
Q; ++i and i++
Q: char a = 1 and char a = "1"
Q: malloc 
*/

/////////////////
// Identifiers //
/////////////////

Identifiers includes [A-Z][a-z][0-9][_]
Not starts with number
Only first 63 letters are checked for uniqueness
Only first 31 letters are checked for external identifiers
private identifiers starts with _
system level private identifiers start with __

//////////////
// Pointers //
//////////////

int x = 1;
int y = x;
int *ip; // pointer to integer (pointers are defined by the data type it pointed to)
ip = &x;
y = *ip; // When the pointer started with *, it means the data it pointed to, rather than the address it pointed to

////////////////
// References //
////////////////

int x = 7;
int *ip = &x; // Note: in 2 line statements, ip=&x 
int &y = x; // y is a reference of x
printf ("y is %d\n", y); // when use y, just use y rather than *y or &y

////////////////////////
// Arrays and Strings //
////////////////////////

int ia[5];
ia[0] = 1;
*ia = 1; // same as ia[0] = 1; due to array if form of pointer
int *ip = ia; // in this we don't do ip = &ia, due to ia[] is from of pointer, and ip is the size of each element in the array
*ip = 2; //assign the first element of the array
++ip; // move to the second element
*ip = 3; // assign the second element of the array
*(++ip) = 4; // increase the pointer and use it at same time

int ia[5] = {1,2,3,4,5}; // this is defined in C++11

char s[] = {'s','t','r','i','n','g',0}; // string end with 0 
char s[] = {“s” “t” “r” “i” “n” “g”}； // same as above
char s[] = "string"; // same as above

///////////////
// Condition //
///////////////

x > y ? x : y; 



/////////////
// Looping //
/////////////

char s[] = "string";
for (int i=0; s[i]; ++i)
{
	printf ("char is %c\n", s[i]);
}

for (char *cp = s; *cp; ++cp)
{
	printf ("char is %c\n", *cp);
}

for (char c : s) // range based loop, only available after c++11
{
	printf ("char is %c\n", c); // this will loop to 0 (blank end of string)
}

int a[] = {1,2,3,4,5};
for ( int i : a ) // this will loop 5 times
{
	printf("element is %d\n", i); 
}

////////////
// Stdout //
////////////
#include <cstdio>
puts("hello world!");

#include <iostream>
cout << "hello world!" << 2+3 << "other string" <<endl;

///////////////
// functions //
///////////////

// function signature is used to identify a function.
// In C++ it's possible to have different functions with the same name. 
// The compiler selects which function to call based on the entire function's signature, not just the function name.
// This called function overload
// This is one significant area where C++ differs from C. In C, a function is distinguished only by its name

// Call by value
int a  = 1;
f(a);

void f (int a)
{
	++a;
}

// Call by reference will not generated a copy of the passing argument onto stack , which will save memory and time(specially passing a large object etc. a struct )
// Call by reference
int a  = 1;
f(&a);

void f (int* p)
{
	++(*p);
}

// Another way of call by reference
int a  = 1;
f(a);

void f (int & p)
{
	++p;
}

// call by reference read only
int a  = 1;
f(a);

void f ( const int & p)
{
	++p; // this will throw an error
}

// call by reference passing string
#include <string>
string s  = "this is a string";
f(s);

void f ( const string & fs)
{
	printf("value is %s\n", fs.c_str());
}

#include <string>
string s  = "this is a string";
f(&s);

void f ( const string * fs)
{
	printf("value is %s\n", fs->c_str());
}

// return by reference
#include <string>
const string & func()
{
	static string s = "this is s long string"; // to use static, because In order to return a reference, it has to be a reference to something in static storage space.
}

printf("return value is %s\n", func().c_str());

// function pointer
void func ()
{
	puts("this is a func()\n");
}

void (*fp)() = func // also can use &func
fp();  // can be (*fp)()
// an use case for function pointer is jump table for function calls

//operator overload !!!
int operator + (const A & lhs, const A & rhs)
{
	return lhs.value() + rhs.value();
}

//variable numbers of arguments!!!  variadic functions
#include <cstdarg>
double average (const int count, ...)
{ 
	va_list ap;
	int i;
	double total = 0.0;
	va_start(ap, count) //macro
	for (i = 0; i<count; ++i)
	{
		total += va_arg(ap,double);
	}
	va_end(ap)
	return total/count;
}

// For every recursive function call, memory is allocated for the parameters, for any local variables,
// for the return value and for other overhead that you might have in your function, 
// and all of this is allocated on the stack which means that it's very possible to overrun your stack and create a security vulnerability.
// A loop is often a more efficient way to do something like this


//////////////////
// Preprocessor //
//////////////////

#include <file>

#define ONE 1

#define MAX(a,b) ( a > b ? a : b ) //macro

#ifndef CONDITIONAL_H_
#define CONDITIONAL_H_
#define NUMBER 2
#define CONSTANT 73
#endif /*CONDITIONAL_H_*/

#pragma long_calls
#pragma make Label
#pragma align 32

//including files
#include <cstdio>
#include "preproc.h"

// Conditional 
#if
#ifdef
#ifndef
#else
#elif
#endif

#if defined(MACRO)
#if !defined(MACRO)

//backslash skip new line mark

#pragma once


/////////////////////////
// Classes and Objects //
/////////////////////////

//class member defaults to private
//date members

struct A {
	int ia;		// struct data member default to public
	int ib;
}

int main (int argc, char ** argv)
{
	A a = {1,2,3};
	A *pa = &a;
	printf ("ia is %d, ib is %d", a.ia, pa->ib); // .(element selection operator) is used for access data member by object name, ->(pointer selection operator) is used by a pointer
}


// function members
//const safe ???


//constructor
//initializer list ???
class circle {
	int _x;
	int _y;
	int _r;
public:
	circle (int x, int y, int r) : _x(x),_y(y),_r(r){};
};


//default function argument value
class Rational {
	int _n;
	int _d;
public:
	Rational (int numerator =0, int denominator = 1) : _n(numerator),_d(denominator){};
};


// if the default constructor is private, that will prevent anyone create a object from this base class,
// and if a copy constructor is in protected, so derived class can overloading it with a public one  
//copy constructor

// put default constructor in private, that force to use the formal constructor
// implicit and explicit conversion ???



//destructor 

//This pointer????

//new operator created a pointer pointed to the class object
A * ap = new A;
A * ap = new (nothrow) A;

//delete operator remove a pointer to a object  
delete ap

//new and delete can be used as array of pointers
A * ap = new A[3];
delete[] ap

////////////////////////
// Object inheritance //
////////////////////////

//base class
public // access to anyone
protected // access by base class and derived class only
private // // access by base class only
// if the default constructor is private, that will prevent anyone create a object from this base class,
// and if a copy constructor is in protected, so derived class can overloading it with a public one  

friend class Dog; // this give the access to a private members
friend const string & func(const Animal & a);

//Derived class

// Dog class, drived form Animal class
class Dog : public Animal {
	int walked;
public:
	Dog (string n) : Animal (n, "dog", "woof"), walked(0) {};
	int walk() {return ++walked;}
};

//multiple inheritance??

//virtual class

////////////////
// NameSpaces //
////////////////

namespace bwstring {
	
}; //namespace bwstring

using namespace bwstring;
using bwsting::string; //use part of the namespace 


///////////////////////
// Operator overload //
///////////////////////

//1) overload operator with member functions
//2) overload operator with non-member functions
//3) conversion operators, something like overload a cast operator to cast your class to other type ????
?????

//By overloading the function operator you can create a class that operates as if it were a function ????

/////////////////////////
// Exception and catch //
/////////////////////////
throw E ("some error");

try {
}catch(exception & e){
}

///////////////
// Data type //
///////////////



//integer type
char //8 bits
short int//signed 16bits,
int //signed 32bits
long int//32bits on windows, 64bit on Mac/Linux, one of the reason to use int32_t
long long int

// following from #include <cstdint>
int8_t
int16_t
int32_t
int64_t
uint8_t
uint16_t
uint32_t
uint64_t 

42 // int
42L // long
42LL // long long
42U // unsigned
0223 // octal
0x93 //Hex
0b10010011 //binary, only supported after C++14


//float type
float // 4 bytes, 32 bits, precision 7 digits
double // 8 bytes, 64 bits, precision 16 digits
long double // 16 bytes, 128 bits
500.0 // float
5e2 //float, 500.0

//boolean type

//array type , C-string is a special type of array

\ //escape for C-string
\0 // null character
\a // audible bell
\b //backspace
\f //form feed
\n //line feed
\r // carriage return 
\t // horizontal tab
\v // vertical tab
\nnn // octal value
\xnn // hexadecimal
\unnnn // Unicode value

//qualifiers
// CV qualifiers
const
volatile
mutable

// Storage qualifiers
static //even the data member marked at static, they are global
register
extern

//structure type

//class type, based on structures, but with default to private data members and function members 

//union type is set of overlapping object types ???

//pointer is a reference to an object or given type

//reference is like a pointer, but immutable(can't be changed)

int i = 5;
int &ir = i;
/*  You cannot take a reference of the reference. 
    You cannot have a pointer to a reference. 
    You cannot have an array of references. 
    And the reference cannot be null. 
    It cannot be uninitialized. 
    And it cannot be changed to refer to another variable. */

//bit field ???

//Enumerations ????

//typedef ??

//void type
void func (void){
	printf("this is void func\n");
	return;
}

//auto type ??

//null pointer ??
nullptr
	
	
///////////////
// Operators //
///////////////

// compound operators
x = X + y;
x += y; // this is more efficient way they x = x + y, by not creating new temp object ,and not copying object

// increment/decrement operators
int x = 42;
print ("value is %d\n", x++); // pre-increment, print 42, return x first, then++
print ("value is %d\n", ++x); // post-increment, print 43, ++ first, then return x, more efficient by not creating new temp object ,and not copying object

//compare operators
==
!=
>
<
>=
<=

//logical operators
&& // logical AND
|| // logical OR
! // logical NOT

//bitwise operators
~ // bitwise NOT
& // bitwise AND
| // bitwise OR
<< // left shift
>> //right shift

//ternary conditional operator
condition == true ? "yes" : "no"

//sizeof operator

//typeid operator ??

//operators precedence

///////////////
// Templates //
///////////////

//////////////////////////
// C++ Standard Library //
//////////////////////////


/////////
// STL //
/////////

#include <string>
//STL string is different from C string, which is not terminated by 0 


